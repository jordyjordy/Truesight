type Campaign {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
  _id: MongoID!
}

"""A connection to a list of items."""
type CampaignConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CampaignEdge!]!
}

"""An edge in a connection."""
type CampaignEdge {
  """The item at the end of the edge"""
  node: Campaign!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type CampaignPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Campaign!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Character {
  name: String
  user: MongoID
  cclass: [CharacterCclass]
  looks: CharacterLooks
  traits: [CharacterTraits]
  counters: [CharacterCounters]
  race: String
  background: String
  alignment: String
  experience: Float
  money: CharacterMoney
  proficiency: Float
  attributes: CharacterAttributes
  savingthrows: CharacterSavingthrows
  skills: [CharacterSkills]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [CharacterSpells]
  spellsave: Float
  spellattack: Float
  effects: [CharacterEffects]
  proficiencies: [CharacterProficiencies]
  backgroundinfo: CharacterBackgroundinfo
  inventory: CharacterInventory
  attacks: [CharacterAttacks]
  saves: CharacterSaves
  _id: MongoID!
}

type CharacterAttacks {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

input CharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

type CharacterAttributes {
  strength: CharacterAttributesStrength
  dexterity: CharacterAttributesDexterity
  constitution: CharacterAttributesConstitution
  intelligence: CharacterAttributesIntelligence
  wisdom: CharacterAttributesWisdom
  charisma: CharacterAttributesCharisma
}

type CharacterAttributesCharisma {
  name: String
  base: Float
  modifiers: [CharacterAttributesCharismaModifiers]
}

input CharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [CharacterAttributesCharismaModifiersInput]
}

type CharacterAttributesCharismaModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterAttributesConstitution {
  name: String
  base: Float
  modifiers: [CharacterAttributesConstitutionModifiers]
}

input CharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [CharacterAttributesConstitutionModifiersInput]
}

type CharacterAttributesConstitutionModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterAttributesDexterity {
  name: String
  base: Float
  modifiers: [CharacterAttributesDexterityModifiers]
}

input CharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [CharacterAttributesDexterityModifiersInput]
}

type CharacterAttributesDexterityModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterAttributesInput {
  strength: CharacterAttributesStrengthInput
  dexterity: CharacterAttributesDexterityInput
  constitution: CharacterAttributesConstitutionInput
  intelligence: CharacterAttributesIntelligenceInput
  wisdom: CharacterAttributesWisdomInput
  charisma: CharacterAttributesCharismaInput
}

type CharacterAttributesIntelligence {
  name: String
  base: Float
  modifiers: [CharacterAttributesIntelligenceModifiers]
}

input CharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [CharacterAttributesIntelligenceModifiersInput]
}

type CharacterAttributesIntelligenceModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterAttributesStrength {
  name: String
  base: Float
  modifiers: [CharacterAttributesStrengthModifiers]
}

input CharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [CharacterAttributesStrengthModifiersInput]
}

type CharacterAttributesStrengthModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterAttributesWisdom {
  name: String
  base: Float
  modifiers: [CharacterAttributesWisdomModifiers]
}

input CharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [CharacterAttributesWisdomModifiersInput]
}

type CharacterAttributesWisdomModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterBackgroundinfo {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

input CharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

type CharacterCclass {
  name: String
  subclass: String
  level: Float
  hitdice: CharacterCclassHitdice
  _id: MongoID
}

type CharacterCclassHitdice {
  current: Float
  dice: Float
}

input CharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

input CharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: CharacterCclassHitdiceInput
  _id: MongoID
}

"""A connection to a list of items."""
type CharacterConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CharacterEdge!]!
}

type CharacterCounters {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

input CharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

"""An edge in a connection."""
type CharacterEdge {
  """The item at the end of the edge"""
  node: Character!

  """A cursor for use in pagination"""
  cursor: String!
}

type CharacterEffects {
  icon: String
  name: String
  description: String
  _id: MongoID
}

input CharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

type CharacterInventory {
  backpack: [CharacterInventoryBackpack]
  equipped: [CharacterInventoryEquipped]
}

type CharacterInventoryBackpack {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

input CharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

type CharacterInventoryEquipped {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

input CharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

input CharacterInventoryInput {
  backpack: [CharacterInventoryBackpackInput]
  equipped: [CharacterInventoryEquippedInput]
}

type CharacterLooks {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

input CharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

type CharacterMoney {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

input CharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

"""List of items with pagination."""
type CharacterPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Character!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type CharacterProficiencies {
  name: String
  description: String
  _id: MongoID
}

input CharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

type CharacterSaves {
  succes: Float
  failure: Float
}

input CharacterSavesInput {
  succes: Float
  failure: Float
}

type CharacterSavingthrows {
  strength: CharacterSavingthrowsStrength
  dexterity: CharacterSavingthrowsDexterity
  constitution: CharacterSavingthrowsConstitution
  intelligence: CharacterSavingthrowsIntelligence
  wisdom: CharacterSavingthrowsWisdom
  charisma: CharacterSavingthrowsCharisma
}

type CharacterSavingthrowsCharisma {
  proficiency: Float
  modifiers: [CharacterSavingthrowsCharismaModifiers]
}

input CharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [CharacterSavingthrowsCharismaModifiersInput]
}

type CharacterSavingthrowsCharismaModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterSavingthrowsConstitution {
  proficiency: Float
  modifiers: [CharacterSavingthrowsConstitutionModifiers]
}

input CharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [CharacterSavingthrowsConstitutionModifiersInput]
}

type CharacterSavingthrowsConstitutionModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterSavingthrowsDexterity {
  proficiency: Float
  modifiers: [CharacterSavingthrowsDexterityModifiers]
}

input CharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [CharacterSavingthrowsDexterityModifiersInput]
}

type CharacterSavingthrowsDexterityModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterSavingthrowsInput {
  strength: CharacterSavingthrowsStrengthInput
  dexterity: CharacterSavingthrowsDexterityInput
  constitution: CharacterSavingthrowsConstitutionInput
  intelligence: CharacterSavingthrowsIntelligenceInput
  wisdom: CharacterSavingthrowsWisdomInput
  charisma: CharacterSavingthrowsCharismaInput
}

type CharacterSavingthrowsIntelligence {
  proficiency: Float
  modifiers: [CharacterSavingthrowsIntelligenceModifiers]
}

input CharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [CharacterSavingthrowsIntelligenceModifiersInput]
}

type CharacterSavingthrowsIntelligenceModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterSavingthrowsStrength {
  proficiency: Float
  modifiers: [CharacterSavingthrowsStrengthModifiers]
}

input CharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [CharacterSavingthrowsStrengthModifiersInput]
}

type CharacterSavingthrowsStrengthModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterSavingthrowsWisdom {
  proficiency: Float
  modifiers: [CharacterSavingthrowsWisdomModifiers]
}

input CharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [CharacterSavingthrowsWisdomModifiersInput]
}

type CharacterSavingthrowsWisdomModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterSkills {
  name: String
  ability: String
  proficiency: Float
  modifiers: [CharacterSkillsModifiers]
  _id: MongoID
}

input CharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [CharacterSkillsModifiersInput]
  _id: MongoID
}

type CharacterSkillsModifiers {
  name: String
  value: Float
  source: String
  _id: MongoID
}

input CharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

type CharacterSpells {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

input CharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

type CharacterTraits {
  name: String
  description: String
  source: String
  _id: MongoID
}

input CharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

""""""
input CreateManyCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
}

type CreateManyCampaignPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Campaign!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyCharacterInput {
  name: String
  user: MongoID
  cclass: [CharacterCclassInput]
  looks: CharacterLooksInput
  traits: [CharacterTraitsInput]
  counters: [CharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: CharacterMoneyInput
  proficiency: Float
  attributes: CharacterAttributesInput
  savingthrows: CharacterSavingthrowsInput
  skills: [CharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [CharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [CharacterEffectsInput]
  proficiencies: [CharacterProficienciesInput]
  backgroundinfo: CharacterBackgroundinfoInput
  inventory: CharacterInventoryInput
  attacks: [CharacterAttacksInput]
  saves: CharacterSavesInput
}

type CreateManyCharacterPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Character!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyHandoutInput {
  name: String!
  image: String!
}

type CreateManyHandoutPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Handout!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
}

type CreateManyItemPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Item!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyLogInput {
  name: String!
  session: Float!
  text: String
  campaign: MongoID
}

type CreateManyLogPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Log!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyNoteInput {
  name: String!
  type: EnumNoteType!
  text: String!
}

type CreateManyNotePayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Note!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManySpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
}

type CreateManySpellPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [Spell!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateManyUserInput {
  email: String!
  password: String!
}

type CreateManyUserPayload {
  """Documents IDs"""
  recordIds: [MongoID!]!

  """Created documents"""
  records: [User!]

  """Number of created documents"""
  createdCount: Int!

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
}

type CreateOneCampaignPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Campaign

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneCharacterInput {
  name: String
  user: MongoID
  cclass: [CharacterCclassInput]
  looks: CharacterLooksInput
  traits: [CharacterTraitsInput]
  counters: [CharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: CharacterMoneyInput
  proficiency: Float
  attributes: CharacterAttributesInput
  savingthrows: CharacterSavingthrowsInput
  skills: [CharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [CharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [CharacterEffectsInput]
  proficiencies: [CharacterProficienciesInput]
  backgroundinfo: CharacterBackgroundinfoInput
  inventory: CharacterInventoryInput
  attacks: [CharacterAttacksInput]
  saves: CharacterSavesInput
}

type CreateOneCharacterPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Character

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneHandoutInput {
  name: String!
  image: String!
}

type CreateOneHandoutPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Handout

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
}

type CreateOneItemPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Item

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneLogInput {
  name: String!
  session: Float!
  text: String
  campaign: MongoID
}

type CreateOneLogPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneNoteInput {
  name: String!
  type: EnumNoteType!
  text: String!
}

type CreateOneNotePayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Note

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneSpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
}

type CreateOneSpellPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: Spell

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input CreateOneUserInput {
  email: String!
  password: String!
}

type CreateOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Created document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

enum EnumNoteType {
  NPC
  Location
  Event
  Item
  Misc
}

interface ErrorInterface {
  """Generic error message"""
  message: String
}

input FilterCountCampaign_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountCampaignOperatorsInput
  OR: [FilterCountCampaignInput!]
  AND: [FilterCountCampaignInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountCampaignOperatorsInput {
  _id: FilterCountCampaign_idOperatorsInput
}

input FilterCountCharacter_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountCharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

""""""
input FilterCountCharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [FilterCountCharacterAttributesCharismaModifiersInput]
}

""""""
input FilterCountCharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [FilterCountCharacterAttributesConstitutionModifiersInput]
}

""""""
input FilterCountCharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [FilterCountCharacterAttributesDexterityModifiersInput]
}

""""""
input FilterCountCharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterAttributesInput {
  strength: FilterCountCharacterAttributesStrengthInput
  dexterity: FilterCountCharacterAttributesDexterityInput
  constitution: FilterCountCharacterAttributesConstitutionInput
  intelligence: FilterCountCharacterAttributesIntelligenceInput
  wisdom: FilterCountCharacterAttributesWisdomInput
  charisma: FilterCountCharacterAttributesCharismaInput
}

""""""
input FilterCountCharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [FilterCountCharacterAttributesIntelligenceModifiersInput]
}

""""""
input FilterCountCharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [FilterCountCharacterAttributesStrengthModifiersInput]
}

""""""
input FilterCountCharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [FilterCountCharacterAttributesWisdomModifiersInput]
}

""""""
input FilterCountCharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

""""""
input FilterCountCharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

""""""
input FilterCountCharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: FilterCountCharacterCclassHitdiceInput
  _id: MongoID
}

""""""
input FilterCountCharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

""""""
input FilterCountCharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterCountCharacterInput {
  name: String
  user: MongoID
  cclass: [FilterCountCharacterCclassInput]
  looks: FilterCountCharacterLooksInput
  traits: [FilterCountCharacterTraitsInput]
  counters: [FilterCountCharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: FilterCountCharacterMoneyInput
  proficiency: Float
  attributes: FilterCountCharacterAttributesInput
  savingthrows: FilterCountCharacterSavingthrowsInput
  skills: [FilterCountCharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [FilterCountCharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [FilterCountCharacterEffectsInput]
  proficiencies: [FilterCountCharacterProficienciesInput]
  backgroundinfo: FilterCountCharacterBackgroundinfoInput
  inventory: FilterCountCharacterInventoryInput
  attacks: [FilterCountCharacterAttacksInput]
  saves: FilterCountCharacterSavesInput
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountCharacterOperatorsInput
  OR: [FilterCountCharacterInput!]
  AND: [FilterCountCharacterInput!]
}

""""""
input FilterCountCharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterCountCharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterCountCharacterInventoryInput {
  backpack: [FilterCountCharacterInventoryBackpackInput]
  equipped: [FilterCountCharacterInventoryEquippedInput]
}

""""""
input FilterCountCharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

""""""
input FilterCountCharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountCharacterOperatorsInput {
  _id: FilterCountCharacter_idOperatorsInput
}

""""""
input FilterCountCharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterCountCharacterSavesInput {
  succes: Float
  failure: Float
}

""""""
input FilterCountCharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [FilterCountCharacterSavingthrowsCharismaModifiersInput]
}

""""""
input FilterCountCharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [FilterCountCharacterSavingthrowsConstitutionModifiersInput]
}

""""""
input FilterCountCharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [FilterCountCharacterSavingthrowsDexterityModifiersInput]
}

""""""
input FilterCountCharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterSavingthrowsInput {
  strength: FilterCountCharacterSavingthrowsStrengthInput
  dexterity: FilterCountCharacterSavingthrowsDexterityInput
  constitution: FilterCountCharacterSavingthrowsConstitutionInput
  intelligence: FilterCountCharacterSavingthrowsIntelligenceInput
  wisdom: FilterCountCharacterSavingthrowsWisdomInput
  charisma: FilterCountCharacterSavingthrowsCharismaInput
}

""""""
input FilterCountCharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [FilterCountCharacterSavingthrowsIntelligenceModifiersInput]
}

""""""
input FilterCountCharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [FilterCountCharacterSavingthrowsStrengthModifiersInput]
}

""""""
input FilterCountCharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [FilterCountCharacterSavingthrowsWisdomModifiersInput]
}

""""""
input FilterCountCharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [FilterCountCharacterSkillsModifiersInput]
  _id: MongoID
}

""""""
input FilterCountCharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterCountCharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

""""""
input FilterCountCharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

input FilterCountHandout_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountHandoutInput {
  name: String
  image: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountHandoutOperatorsInput
  OR: [FilterCountHandoutInput!]
  AND: [FilterCountHandoutInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountHandoutOperatorsInput {
  _id: FilterCountHandout_idOperatorsInput
}

input FilterCountItem_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountItemOperatorsInput
  OR: [FilterCountItemInput!]
  AND: [FilterCountItemInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountItemOperatorsInput {
  _id: FilterCountItem_idOperatorsInput
}

input FilterCountLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountLogInput {
  name: String
  session: Float
  text: String
  campaign: MongoID
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountLogOperatorsInput
  OR: [FilterCountLogInput!]
  AND: [FilterCountLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountLogOperatorsInput {
  _id: FilterCountLog_idOperatorsInput
}

input FilterCountNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountNoteInput {
  name: String
  type: EnumNoteType
  text: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountNoteOperatorsInput
  OR: [FilterCountNoteInput!]
  AND: [FilterCountNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountNoteOperatorsInput {
  _id: FilterCountNote_idOperatorsInput
}

input FilterCountSpell_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountSpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountSpellOperatorsInput
  OR: [FilterCountSpellInput!]
  AND: [FilterCountSpellInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountSpellOperatorsInput {
  _id: FilterCountSpell_idOperatorsInput
}

input FilterCountUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterCountUserInput {
  email: String
  password: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterCountUserOperatorsInput
  OR: [FilterCountUserInput!]
  AND: [FilterCountUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterCountUserOperatorsInput {
  _id: FilterCountUser_idOperatorsInput
}

input FilterFindManyCampaign_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCampaignOperatorsInput
  OR: [FilterFindManyCampaignInput!]
  AND: [FilterFindManyCampaignInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyCampaignOperatorsInput {
  _id: FilterFindManyCampaign_idOperatorsInput
}

input FilterFindManyCharacter_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyCharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [FilterFindManyCharacterAttributesCharismaModifiersInput]
}

""""""
input FilterFindManyCharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [FilterFindManyCharacterAttributesConstitutionModifiersInput]
}

""""""
input FilterFindManyCharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [FilterFindManyCharacterAttributesDexterityModifiersInput]
}

""""""
input FilterFindManyCharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterAttributesInput {
  strength: FilterFindManyCharacterAttributesStrengthInput
  dexterity: FilterFindManyCharacterAttributesDexterityInput
  constitution: FilterFindManyCharacterAttributesConstitutionInput
  intelligence: FilterFindManyCharacterAttributesIntelligenceInput
  wisdom: FilterFindManyCharacterAttributesWisdomInput
  charisma: FilterFindManyCharacterAttributesCharismaInput
}

""""""
input FilterFindManyCharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [FilterFindManyCharacterAttributesIntelligenceModifiersInput]
}

""""""
input FilterFindManyCharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [FilterFindManyCharacterAttributesStrengthModifiersInput]
}

""""""
input FilterFindManyCharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [FilterFindManyCharacterAttributesWisdomModifiersInput]
}

""""""
input FilterFindManyCharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

""""""
input FilterFindManyCharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

""""""
input FilterFindManyCharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: FilterFindManyCharacterCclassHitdiceInput
  _id: MongoID
}

""""""
input FilterFindManyCharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

""""""
input FilterFindManyCharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterInput {
  name: String
  user: MongoID
  cclass: [FilterFindManyCharacterCclassInput]
  looks: FilterFindManyCharacterLooksInput
  traits: [FilterFindManyCharacterTraitsInput]
  counters: [FilterFindManyCharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: FilterFindManyCharacterMoneyInput
  proficiency: Float
  attributes: FilterFindManyCharacterAttributesInput
  savingthrows: FilterFindManyCharacterSavingthrowsInput
  skills: [FilterFindManyCharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [FilterFindManyCharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [FilterFindManyCharacterEffectsInput]
  proficiencies: [FilterFindManyCharacterProficienciesInput]
  backgroundinfo: FilterFindManyCharacterBackgroundinfoInput
  inventory: FilterFindManyCharacterInventoryInput
  attacks: [FilterFindManyCharacterAttacksInput]
  saves: FilterFindManyCharacterSavesInput
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyCharacterOperatorsInput
  OR: [FilterFindManyCharacterInput!]
  AND: [FilterFindManyCharacterInput!]
}

""""""
input FilterFindManyCharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterFindManyCharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterFindManyCharacterInventoryInput {
  backpack: [FilterFindManyCharacterInventoryBackpackInput]
  equipped: [FilterFindManyCharacterInventoryEquippedInput]
}

""""""
input FilterFindManyCharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

""""""
input FilterFindManyCharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyCharacterOperatorsInput {
  _id: FilterFindManyCharacter_idOperatorsInput
}

""""""
input FilterFindManyCharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterSavesInput {
  succes: Float
  failure: Float
}

""""""
input FilterFindManyCharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [FilterFindManyCharacterSavingthrowsCharismaModifiersInput]
}

""""""
input FilterFindManyCharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [FilterFindManyCharacterSavingthrowsConstitutionModifiersInput]
}

""""""
input FilterFindManyCharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [FilterFindManyCharacterSavingthrowsDexterityModifiersInput]
}

""""""
input FilterFindManyCharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterSavingthrowsInput {
  strength: FilterFindManyCharacterSavingthrowsStrengthInput
  dexterity: FilterFindManyCharacterSavingthrowsDexterityInput
  constitution: FilterFindManyCharacterSavingthrowsConstitutionInput
  intelligence: FilterFindManyCharacterSavingthrowsIntelligenceInput
  wisdom: FilterFindManyCharacterSavingthrowsWisdomInput
  charisma: FilterFindManyCharacterSavingthrowsCharismaInput
}

""""""
input FilterFindManyCharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [FilterFindManyCharacterSavingthrowsIntelligenceModifiersInput]
}

""""""
input FilterFindManyCharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [FilterFindManyCharacterSavingthrowsStrengthModifiersInput]
}

""""""
input FilterFindManyCharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [FilterFindManyCharacterSavingthrowsWisdomModifiersInput]
}

""""""
input FilterFindManyCharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [FilterFindManyCharacterSkillsModifiersInput]
  _id: MongoID
}

""""""
input FilterFindManyCharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindManyCharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

""""""
input FilterFindManyCharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

input FilterFindManyHandout_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyHandoutInput {
  name: String
  image: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyHandoutOperatorsInput
  OR: [FilterFindManyHandoutInput!]
  AND: [FilterFindManyHandoutInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyHandoutOperatorsInput {
  _id: FilterFindManyHandout_idOperatorsInput
}

input FilterFindManyItem_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyItemOperatorsInput
  OR: [FilterFindManyItemInput!]
  AND: [FilterFindManyItemInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyItemOperatorsInput {
  _id: FilterFindManyItem_idOperatorsInput
}

input FilterFindManyLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyLogInput {
  name: String
  session: Float
  text: String
  campaign: MongoID
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyLogOperatorsInput
  OR: [FilterFindManyLogInput!]
  AND: [FilterFindManyLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyLogOperatorsInput {
  _id: FilterFindManyLog_idOperatorsInput
}

input FilterFindManyNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyNoteInput {
  name: String
  type: EnumNoteType
  text: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyNoteOperatorsInput
  OR: [FilterFindManyNoteInput!]
  AND: [FilterFindManyNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyNoteOperatorsInput {
  _id: FilterFindManyNote_idOperatorsInput
}

input FilterFindManySpell_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManySpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManySpellOperatorsInput
  OR: [FilterFindManySpellInput!]
  AND: [FilterFindManySpellInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManySpellOperatorsInput {
  _id: FilterFindManySpell_idOperatorsInput
}

input FilterFindManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindManyUserInput {
  email: String
  password: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindManyUserOperatorsInput
  OR: [FilterFindManyUserInput!]
  AND: [FilterFindManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindManyUserOperatorsInput {
  _id: FilterFindManyUser_idOperatorsInput
}

input FilterFindOneCampaign_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneCampaignOperatorsInput
  OR: [FilterFindOneCampaignInput!]
  AND: [FilterFindOneCampaignInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneCampaignOperatorsInput {
  _id: FilterFindOneCampaign_idOperatorsInput
}

input FilterFindOneCharacter_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneCharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [FilterFindOneCharacterAttributesCharismaModifiersInput]
}

""""""
input FilterFindOneCharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [FilterFindOneCharacterAttributesConstitutionModifiersInput]
}

""""""
input FilterFindOneCharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [FilterFindOneCharacterAttributesDexterityModifiersInput]
}

""""""
input FilterFindOneCharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterAttributesInput {
  strength: FilterFindOneCharacterAttributesStrengthInput
  dexterity: FilterFindOneCharacterAttributesDexterityInput
  constitution: FilterFindOneCharacterAttributesConstitutionInput
  intelligence: FilterFindOneCharacterAttributesIntelligenceInput
  wisdom: FilterFindOneCharacterAttributesWisdomInput
  charisma: FilterFindOneCharacterAttributesCharismaInput
}

""""""
input FilterFindOneCharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [FilterFindOneCharacterAttributesIntelligenceModifiersInput]
}

""""""
input FilterFindOneCharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [FilterFindOneCharacterAttributesStrengthModifiersInput]
}

""""""
input FilterFindOneCharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [FilterFindOneCharacterAttributesWisdomModifiersInput]
}

""""""
input FilterFindOneCharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

""""""
input FilterFindOneCharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

""""""
input FilterFindOneCharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: FilterFindOneCharacterCclassHitdiceInput
  _id: MongoID
}

""""""
input FilterFindOneCharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

""""""
input FilterFindOneCharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterInput {
  name: String
  user: MongoID
  cclass: [FilterFindOneCharacterCclassInput]
  looks: FilterFindOneCharacterLooksInput
  traits: [FilterFindOneCharacterTraitsInput]
  counters: [FilterFindOneCharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: FilterFindOneCharacterMoneyInput
  proficiency: Float
  attributes: FilterFindOneCharacterAttributesInput
  savingthrows: FilterFindOneCharacterSavingthrowsInput
  skills: [FilterFindOneCharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [FilterFindOneCharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [FilterFindOneCharacterEffectsInput]
  proficiencies: [FilterFindOneCharacterProficienciesInput]
  backgroundinfo: FilterFindOneCharacterBackgroundinfoInput
  inventory: FilterFindOneCharacterInventoryInput
  attacks: [FilterFindOneCharacterAttacksInput]
  saves: FilterFindOneCharacterSavesInput
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneCharacterOperatorsInput
  OR: [FilterFindOneCharacterInput!]
  AND: [FilterFindOneCharacterInput!]
}

""""""
input FilterFindOneCharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterFindOneCharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterFindOneCharacterInventoryInput {
  backpack: [FilterFindOneCharacterInventoryBackpackInput]
  equipped: [FilterFindOneCharacterInventoryEquippedInput]
}

""""""
input FilterFindOneCharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

""""""
input FilterFindOneCharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneCharacterOperatorsInput {
  _id: FilterFindOneCharacter_idOperatorsInput
}

""""""
input FilterFindOneCharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterSavesInput {
  succes: Float
  failure: Float
}

""""""
input FilterFindOneCharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [FilterFindOneCharacterSavingthrowsCharismaModifiersInput]
}

""""""
input FilterFindOneCharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [FilterFindOneCharacterSavingthrowsConstitutionModifiersInput]
}

""""""
input FilterFindOneCharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [FilterFindOneCharacterSavingthrowsDexterityModifiersInput]
}

""""""
input FilterFindOneCharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterSavingthrowsInput {
  strength: FilterFindOneCharacterSavingthrowsStrengthInput
  dexterity: FilterFindOneCharacterSavingthrowsDexterityInput
  constitution: FilterFindOneCharacterSavingthrowsConstitutionInput
  intelligence: FilterFindOneCharacterSavingthrowsIntelligenceInput
  wisdom: FilterFindOneCharacterSavingthrowsWisdomInput
  charisma: FilterFindOneCharacterSavingthrowsCharismaInput
}

""""""
input FilterFindOneCharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [FilterFindOneCharacterSavingthrowsIntelligenceModifiersInput]
}

""""""
input FilterFindOneCharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [FilterFindOneCharacterSavingthrowsStrengthModifiersInput]
}

""""""
input FilterFindOneCharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [FilterFindOneCharacterSavingthrowsWisdomModifiersInput]
}

""""""
input FilterFindOneCharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [FilterFindOneCharacterSkillsModifiersInput]
  _id: MongoID
}

""""""
input FilterFindOneCharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterFindOneCharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

""""""
input FilterFindOneCharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

input FilterFindOneHandout_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneHandoutInput {
  name: String
  image: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneHandoutOperatorsInput
  OR: [FilterFindOneHandoutInput!]
  AND: [FilterFindOneHandoutInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneHandoutOperatorsInput {
  _id: FilterFindOneHandout_idOperatorsInput
}

input FilterFindOneItem_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneItemOperatorsInput
  OR: [FilterFindOneItemInput!]
  AND: [FilterFindOneItemInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneItemOperatorsInput {
  _id: FilterFindOneItem_idOperatorsInput
}

input FilterFindOneLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneLogInput {
  name: String
  session: Float
  text: String
  campaign: MongoID
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneLogOperatorsInput
  OR: [FilterFindOneLogInput!]
  AND: [FilterFindOneLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneLogOperatorsInput {
  _id: FilterFindOneLog_idOperatorsInput
}

input FilterFindOneNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneNoteInput {
  name: String
  type: EnumNoteType
  text: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneNoteOperatorsInput
  OR: [FilterFindOneNoteInput!]
  AND: [FilterFindOneNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneNoteOperatorsInput {
  _id: FilterFindOneNote_idOperatorsInput
}

input FilterFindOneSpell_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneSpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneSpellOperatorsInput
  OR: [FilterFindOneSpellInput!]
  AND: [FilterFindOneSpellInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneSpellOperatorsInput {
  _id: FilterFindOneSpell_idOperatorsInput
}

input FilterFindOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterFindOneUserInput {
  email: String
  password: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterFindOneUserOperatorsInput
  OR: [FilterFindOneUserInput!]
  AND: [FilterFindOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterFindOneUserOperatorsInput {
  _id: FilterFindOneUser_idOperatorsInput
}

input FilterRemoveManyCampaign_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyCampaignOperatorsInput
  OR: [FilterRemoveManyCampaignInput!]
  AND: [FilterRemoveManyCampaignInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyCampaignOperatorsInput {
  _id: FilterRemoveManyCampaign_idOperatorsInput
}

input FilterRemoveManyCharacter_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyCharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [FilterRemoveManyCharacterAttributesCharismaModifiersInput]
}

""""""
input FilterRemoveManyCharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [FilterRemoveManyCharacterAttributesConstitutionModifiersInput]
}

""""""
input FilterRemoveManyCharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [FilterRemoveManyCharacterAttributesDexterityModifiersInput]
}

""""""
input FilterRemoveManyCharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterAttributesInput {
  strength: FilterRemoveManyCharacterAttributesStrengthInput
  dexterity: FilterRemoveManyCharacterAttributesDexterityInput
  constitution: FilterRemoveManyCharacterAttributesConstitutionInput
  intelligence: FilterRemoveManyCharacterAttributesIntelligenceInput
  wisdom: FilterRemoveManyCharacterAttributesWisdomInput
  charisma: FilterRemoveManyCharacterAttributesCharismaInput
}

""""""
input FilterRemoveManyCharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [FilterRemoveManyCharacterAttributesIntelligenceModifiersInput]
}

""""""
input FilterRemoveManyCharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [FilterRemoveManyCharacterAttributesStrengthModifiersInput]
}

""""""
input FilterRemoveManyCharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [FilterRemoveManyCharacterAttributesWisdomModifiersInput]
}

""""""
input FilterRemoveManyCharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

""""""
input FilterRemoveManyCharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

""""""
input FilterRemoveManyCharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: FilterRemoveManyCharacterCclassHitdiceInput
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterInput {
  name: String
  user: MongoID
  cclass: [FilterRemoveManyCharacterCclassInput]
  looks: FilterRemoveManyCharacterLooksInput
  traits: [FilterRemoveManyCharacterTraitsInput]
  counters: [FilterRemoveManyCharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: FilterRemoveManyCharacterMoneyInput
  proficiency: Float
  attributes: FilterRemoveManyCharacterAttributesInput
  savingthrows: FilterRemoveManyCharacterSavingthrowsInput
  skills: [FilterRemoveManyCharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [FilterRemoveManyCharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [FilterRemoveManyCharacterEffectsInput]
  proficiencies: [FilterRemoveManyCharacterProficienciesInput]
  backgroundinfo: FilterRemoveManyCharacterBackgroundinfoInput
  inventory: FilterRemoveManyCharacterInventoryInput
  attacks: [FilterRemoveManyCharacterAttacksInput]
  saves: FilterRemoveManyCharacterSavesInput
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyCharacterOperatorsInput
  OR: [FilterRemoveManyCharacterInput!]
  AND: [FilterRemoveManyCharacterInput!]
}

""""""
input FilterRemoveManyCharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterInventoryInput {
  backpack: [FilterRemoveManyCharacterInventoryBackpackInput]
  equipped: [FilterRemoveManyCharacterInventoryEquippedInput]
}

""""""
input FilterRemoveManyCharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

""""""
input FilterRemoveManyCharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyCharacterOperatorsInput {
  _id: FilterRemoveManyCharacter_idOperatorsInput
}

""""""
input FilterRemoveManyCharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterSavesInput {
  succes: Float
  failure: Float
}

""""""
input FilterRemoveManyCharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [FilterRemoveManyCharacterSavingthrowsCharismaModifiersInput]
}

""""""
input FilterRemoveManyCharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [FilterRemoveManyCharacterSavingthrowsConstitutionModifiersInput]
}

""""""
input FilterRemoveManyCharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [FilterRemoveManyCharacterSavingthrowsDexterityModifiersInput]
}

""""""
input FilterRemoveManyCharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterSavingthrowsInput {
  strength: FilterRemoveManyCharacterSavingthrowsStrengthInput
  dexterity: FilterRemoveManyCharacterSavingthrowsDexterityInput
  constitution: FilterRemoveManyCharacterSavingthrowsConstitutionInput
  intelligence: FilterRemoveManyCharacterSavingthrowsIntelligenceInput
  wisdom: FilterRemoveManyCharacterSavingthrowsWisdomInput
  charisma: FilterRemoveManyCharacterSavingthrowsCharismaInput
}

""""""
input FilterRemoveManyCharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [FilterRemoveManyCharacterSavingthrowsIntelligenceModifiersInput]
}

""""""
input FilterRemoveManyCharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [FilterRemoveManyCharacterSavingthrowsStrengthModifiersInput]
}

""""""
input FilterRemoveManyCharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [FilterRemoveManyCharacterSavingthrowsWisdomModifiersInput]
}

""""""
input FilterRemoveManyCharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [FilterRemoveManyCharacterSkillsModifiersInput]
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

""""""
input FilterRemoveManyCharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

input FilterRemoveManyHandout_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyHandoutInput {
  name: String
  image: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyHandoutOperatorsInput
  OR: [FilterRemoveManyHandoutInput!]
  AND: [FilterRemoveManyHandoutInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyHandoutOperatorsInput {
  _id: FilterRemoveManyHandout_idOperatorsInput
}

input FilterRemoveManyItem_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyItemOperatorsInput
  OR: [FilterRemoveManyItemInput!]
  AND: [FilterRemoveManyItemInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyItemOperatorsInput {
  _id: FilterRemoveManyItem_idOperatorsInput
}

input FilterRemoveManyLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyLogInput {
  name: String
  session: Float
  text: String
  campaign: MongoID
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyLogOperatorsInput
  OR: [FilterRemoveManyLogInput!]
  AND: [FilterRemoveManyLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyLogOperatorsInput {
  _id: FilterRemoveManyLog_idOperatorsInput
}

input FilterRemoveManyNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyNoteInput {
  name: String
  type: EnumNoteType
  text: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyNoteOperatorsInput
  OR: [FilterRemoveManyNoteInput!]
  AND: [FilterRemoveManyNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyNoteOperatorsInput {
  _id: FilterRemoveManyNote_idOperatorsInput
}

input FilterRemoveManySpell_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManySpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManySpellOperatorsInput
  OR: [FilterRemoveManySpellInput!]
  AND: [FilterRemoveManySpellInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManySpellOperatorsInput {
  _id: FilterRemoveManySpell_idOperatorsInput
}

input FilterRemoveManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveManyUserInput {
  email: String
  password: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveManyUserOperatorsInput
  OR: [FilterRemoveManyUserInput!]
  AND: [FilterRemoveManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveManyUserOperatorsInput {
  _id: FilterRemoveManyUser_idOperatorsInput
}

input FilterRemoveOneCampaign_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneCampaignOperatorsInput
  OR: [FilterRemoveOneCampaignInput!]
  AND: [FilterRemoveOneCampaignInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneCampaignOperatorsInput {
  _id: FilterRemoveOneCampaign_idOperatorsInput
}

input FilterRemoveOneCharacter_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneCharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [FilterRemoveOneCharacterAttributesCharismaModifiersInput]
}

""""""
input FilterRemoveOneCharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [FilterRemoveOneCharacterAttributesConstitutionModifiersInput]
}

""""""
input FilterRemoveOneCharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [FilterRemoveOneCharacterAttributesDexterityModifiersInput]
}

""""""
input FilterRemoveOneCharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterAttributesInput {
  strength: FilterRemoveOneCharacterAttributesStrengthInput
  dexterity: FilterRemoveOneCharacterAttributesDexterityInput
  constitution: FilterRemoveOneCharacterAttributesConstitutionInput
  intelligence: FilterRemoveOneCharacterAttributesIntelligenceInput
  wisdom: FilterRemoveOneCharacterAttributesWisdomInput
  charisma: FilterRemoveOneCharacterAttributesCharismaInput
}

""""""
input FilterRemoveOneCharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [FilterRemoveOneCharacterAttributesIntelligenceModifiersInput]
}

""""""
input FilterRemoveOneCharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [FilterRemoveOneCharacterAttributesStrengthModifiersInput]
}

""""""
input FilterRemoveOneCharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [FilterRemoveOneCharacterAttributesWisdomModifiersInput]
}

""""""
input FilterRemoveOneCharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

""""""
input FilterRemoveOneCharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

""""""
input FilterRemoveOneCharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: FilterRemoveOneCharacterCclassHitdiceInput
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterInput {
  name: String
  user: MongoID
  cclass: [FilterRemoveOneCharacterCclassInput]
  looks: FilterRemoveOneCharacterLooksInput
  traits: [FilterRemoveOneCharacterTraitsInput]
  counters: [FilterRemoveOneCharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: FilterRemoveOneCharacterMoneyInput
  proficiency: Float
  attributes: FilterRemoveOneCharacterAttributesInput
  savingthrows: FilterRemoveOneCharacterSavingthrowsInput
  skills: [FilterRemoveOneCharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [FilterRemoveOneCharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [FilterRemoveOneCharacterEffectsInput]
  proficiencies: [FilterRemoveOneCharacterProficienciesInput]
  backgroundinfo: FilterRemoveOneCharacterBackgroundinfoInput
  inventory: FilterRemoveOneCharacterInventoryInput
  attacks: [FilterRemoveOneCharacterAttacksInput]
  saves: FilterRemoveOneCharacterSavesInput
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneCharacterOperatorsInput
  OR: [FilterRemoveOneCharacterInput!]
  AND: [FilterRemoveOneCharacterInput!]
}

""""""
input FilterRemoveOneCharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterInventoryInput {
  backpack: [FilterRemoveOneCharacterInventoryBackpackInput]
  equipped: [FilterRemoveOneCharacterInventoryEquippedInput]
}

""""""
input FilterRemoveOneCharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

""""""
input FilterRemoveOneCharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneCharacterOperatorsInput {
  _id: FilterRemoveOneCharacter_idOperatorsInput
}

""""""
input FilterRemoveOneCharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterSavesInput {
  succes: Float
  failure: Float
}

""""""
input FilterRemoveOneCharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [FilterRemoveOneCharacterSavingthrowsCharismaModifiersInput]
}

""""""
input FilterRemoveOneCharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [FilterRemoveOneCharacterSavingthrowsConstitutionModifiersInput]
}

""""""
input FilterRemoveOneCharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [FilterRemoveOneCharacterSavingthrowsDexterityModifiersInput]
}

""""""
input FilterRemoveOneCharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterSavingthrowsInput {
  strength: FilterRemoveOneCharacterSavingthrowsStrengthInput
  dexterity: FilterRemoveOneCharacterSavingthrowsDexterityInput
  constitution: FilterRemoveOneCharacterSavingthrowsConstitutionInput
  intelligence: FilterRemoveOneCharacterSavingthrowsIntelligenceInput
  wisdom: FilterRemoveOneCharacterSavingthrowsWisdomInput
  charisma: FilterRemoveOneCharacterSavingthrowsCharismaInput
}

""""""
input FilterRemoveOneCharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [FilterRemoveOneCharacterSavingthrowsIntelligenceModifiersInput]
}

""""""
input FilterRemoveOneCharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [FilterRemoveOneCharacterSavingthrowsStrengthModifiersInput]
}

""""""
input FilterRemoveOneCharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [FilterRemoveOneCharacterSavingthrowsWisdomModifiersInput]
}

""""""
input FilterRemoveOneCharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [FilterRemoveOneCharacterSkillsModifiersInput]
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

""""""
input FilterRemoveOneCharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

input FilterRemoveOneHandout_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneHandoutInput {
  name: String
  image: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneHandoutOperatorsInput
  OR: [FilterRemoveOneHandoutInput!]
  AND: [FilterRemoveOneHandoutInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneHandoutOperatorsInput {
  _id: FilterRemoveOneHandout_idOperatorsInput
}

input FilterRemoveOneItem_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneItemOperatorsInput
  OR: [FilterRemoveOneItemInput!]
  AND: [FilterRemoveOneItemInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneItemOperatorsInput {
  _id: FilterRemoveOneItem_idOperatorsInput
}

input FilterRemoveOneLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneLogInput {
  name: String
  session: Float
  text: String
  campaign: MongoID
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneLogOperatorsInput
  OR: [FilterRemoveOneLogInput!]
  AND: [FilterRemoveOneLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneLogOperatorsInput {
  _id: FilterRemoveOneLog_idOperatorsInput
}

input FilterRemoveOneNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneNoteInput {
  name: String
  type: EnumNoteType
  text: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneNoteOperatorsInput
  OR: [FilterRemoveOneNoteInput!]
  AND: [FilterRemoveOneNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneNoteOperatorsInput {
  _id: FilterRemoveOneNote_idOperatorsInput
}

input FilterRemoveOneSpell_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneSpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneSpellOperatorsInput
  OR: [FilterRemoveOneSpellInput!]
  AND: [FilterRemoveOneSpellInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneSpellOperatorsInput {
  _id: FilterRemoveOneSpell_idOperatorsInput
}

input FilterRemoveOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterRemoveOneUserInput {
  email: String
  password: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterRemoveOneUserOperatorsInput
  OR: [FilterRemoveOneUserInput!]
  AND: [FilterRemoveOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterRemoveOneUserOperatorsInput {
  _id: FilterRemoveOneUser_idOperatorsInput
}

input FilterUpdateManyCampaign_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyCampaignOperatorsInput
  OR: [FilterUpdateManyCampaignInput!]
  AND: [FilterUpdateManyCampaignInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyCampaignOperatorsInput {
  _id: FilterUpdateManyCampaign_idOperatorsInput
}

input FilterUpdateManyCharacter_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyCharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [FilterUpdateManyCharacterAttributesCharismaModifiersInput]
}

""""""
input FilterUpdateManyCharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [FilterUpdateManyCharacterAttributesConstitutionModifiersInput]
}

""""""
input FilterUpdateManyCharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [FilterUpdateManyCharacterAttributesDexterityModifiersInput]
}

""""""
input FilterUpdateManyCharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterAttributesInput {
  strength: FilterUpdateManyCharacterAttributesStrengthInput
  dexterity: FilterUpdateManyCharacterAttributesDexterityInput
  constitution: FilterUpdateManyCharacterAttributesConstitutionInput
  intelligence: FilterUpdateManyCharacterAttributesIntelligenceInput
  wisdom: FilterUpdateManyCharacterAttributesWisdomInput
  charisma: FilterUpdateManyCharacterAttributesCharismaInput
}

""""""
input FilterUpdateManyCharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [FilterUpdateManyCharacterAttributesIntelligenceModifiersInput]
}

""""""
input FilterUpdateManyCharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [FilterUpdateManyCharacterAttributesStrengthModifiersInput]
}

""""""
input FilterUpdateManyCharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [FilterUpdateManyCharacterAttributesWisdomModifiersInput]
}

""""""
input FilterUpdateManyCharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

""""""
input FilterUpdateManyCharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

""""""
input FilterUpdateManyCharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: FilterUpdateManyCharacterCclassHitdiceInput
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterInput {
  name: String
  user: MongoID
  cclass: [FilterUpdateManyCharacterCclassInput]
  looks: FilterUpdateManyCharacterLooksInput
  traits: [FilterUpdateManyCharacterTraitsInput]
  counters: [FilterUpdateManyCharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: FilterUpdateManyCharacterMoneyInput
  proficiency: Float
  attributes: FilterUpdateManyCharacterAttributesInput
  savingthrows: FilterUpdateManyCharacterSavingthrowsInput
  skills: [FilterUpdateManyCharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [FilterUpdateManyCharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [FilterUpdateManyCharacterEffectsInput]
  proficiencies: [FilterUpdateManyCharacterProficienciesInput]
  backgroundinfo: FilterUpdateManyCharacterBackgroundinfoInput
  inventory: FilterUpdateManyCharacterInventoryInput
  attacks: [FilterUpdateManyCharacterAttacksInput]
  saves: FilterUpdateManyCharacterSavesInput
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyCharacterOperatorsInput
  OR: [FilterUpdateManyCharacterInput!]
  AND: [FilterUpdateManyCharacterInput!]
}

""""""
input FilterUpdateManyCharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterInventoryInput {
  backpack: [FilterUpdateManyCharacterInventoryBackpackInput]
  equipped: [FilterUpdateManyCharacterInventoryEquippedInput]
}

""""""
input FilterUpdateManyCharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

""""""
input FilterUpdateManyCharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyCharacterOperatorsInput {
  _id: FilterUpdateManyCharacter_idOperatorsInput
}

""""""
input FilterUpdateManyCharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterSavesInput {
  succes: Float
  failure: Float
}

""""""
input FilterUpdateManyCharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [FilterUpdateManyCharacterSavingthrowsCharismaModifiersInput]
}

""""""
input FilterUpdateManyCharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [FilterUpdateManyCharacterSavingthrowsConstitutionModifiersInput]
}

""""""
input FilterUpdateManyCharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [FilterUpdateManyCharacterSavingthrowsDexterityModifiersInput]
}

""""""
input FilterUpdateManyCharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterSavingthrowsInput {
  strength: FilterUpdateManyCharacterSavingthrowsStrengthInput
  dexterity: FilterUpdateManyCharacterSavingthrowsDexterityInput
  constitution: FilterUpdateManyCharacterSavingthrowsConstitutionInput
  intelligence: FilterUpdateManyCharacterSavingthrowsIntelligenceInput
  wisdom: FilterUpdateManyCharacterSavingthrowsWisdomInput
  charisma: FilterUpdateManyCharacterSavingthrowsCharismaInput
}

""""""
input FilterUpdateManyCharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [FilterUpdateManyCharacterSavingthrowsIntelligenceModifiersInput]
}

""""""
input FilterUpdateManyCharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [FilterUpdateManyCharacterSavingthrowsStrengthModifiersInput]
}

""""""
input FilterUpdateManyCharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [FilterUpdateManyCharacterSavingthrowsWisdomModifiersInput]
}

""""""
input FilterUpdateManyCharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [FilterUpdateManyCharacterSkillsModifiersInput]
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

""""""
input FilterUpdateManyCharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

input FilterUpdateManyHandout_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyHandoutInput {
  name: String
  image: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyHandoutOperatorsInput
  OR: [FilterUpdateManyHandoutInput!]
  AND: [FilterUpdateManyHandoutInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyHandoutOperatorsInput {
  _id: FilterUpdateManyHandout_idOperatorsInput
}

input FilterUpdateManyItem_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyItemOperatorsInput
  OR: [FilterUpdateManyItemInput!]
  AND: [FilterUpdateManyItemInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyItemOperatorsInput {
  _id: FilterUpdateManyItem_idOperatorsInput
}

input FilterUpdateManyLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyLogInput {
  name: String
  session: Float
  text: String
  campaign: MongoID
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyLogOperatorsInput
  OR: [FilterUpdateManyLogInput!]
  AND: [FilterUpdateManyLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyLogOperatorsInput {
  _id: FilterUpdateManyLog_idOperatorsInput
}

input FilterUpdateManyNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyNoteInput {
  name: String
  type: EnumNoteType
  text: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyNoteOperatorsInput
  OR: [FilterUpdateManyNoteInput!]
  AND: [FilterUpdateManyNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyNoteOperatorsInput {
  _id: FilterUpdateManyNote_idOperatorsInput
}

input FilterUpdateManySpell_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManySpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManySpellOperatorsInput
  OR: [FilterUpdateManySpellInput!]
  AND: [FilterUpdateManySpellInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManySpellOperatorsInput {
  _id: FilterUpdateManySpell_idOperatorsInput
}

input FilterUpdateManyUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateManyUserInput {
  email: String
  password: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateManyUserOperatorsInput
  OR: [FilterUpdateManyUserInput!]
  AND: [FilterUpdateManyUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateManyUserOperatorsInput {
  _id: FilterUpdateManyUser_idOperatorsInput
}

input FilterUpdateOneCampaign_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneCampaignOperatorsInput
  OR: [FilterUpdateOneCampaignInput!]
  AND: [FilterUpdateOneCampaignInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneCampaignOperatorsInput {
  _id: FilterUpdateOneCampaign_idOperatorsInput
}

input FilterUpdateOneCharacter_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneCharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [FilterUpdateOneCharacterAttributesCharismaModifiersInput]
}

""""""
input FilterUpdateOneCharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [FilterUpdateOneCharacterAttributesConstitutionModifiersInput]
}

""""""
input FilterUpdateOneCharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [FilterUpdateOneCharacterAttributesDexterityModifiersInput]
}

""""""
input FilterUpdateOneCharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterAttributesInput {
  strength: FilterUpdateOneCharacterAttributesStrengthInput
  dexterity: FilterUpdateOneCharacterAttributesDexterityInput
  constitution: FilterUpdateOneCharacterAttributesConstitutionInput
  intelligence: FilterUpdateOneCharacterAttributesIntelligenceInput
  wisdom: FilterUpdateOneCharacterAttributesWisdomInput
  charisma: FilterUpdateOneCharacterAttributesCharismaInput
}

""""""
input FilterUpdateOneCharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [FilterUpdateOneCharacterAttributesIntelligenceModifiersInput]
}

""""""
input FilterUpdateOneCharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [FilterUpdateOneCharacterAttributesStrengthModifiersInput]
}

""""""
input FilterUpdateOneCharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [FilterUpdateOneCharacterAttributesWisdomModifiersInput]
}

""""""
input FilterUpdateOneCharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

""""""
input FilterUpdateOneCharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

""""""
input FilterUpdateOneCharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: FilterUpdateOneCharacterCclassHitdiceInput
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterInput {
  name: String
  user: MongoID
  cclass: [FilterUpdateOneCharacterCclassInput]
  looks: FilterUpdateOneCharacterLooksInput
  traits: [FilterUpdateOneCharacterTraitsInput]
  counters: [FilterUpdateOneCharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: FilterUpdateOneCharacterMoneyInput
  proficiency: Float
  attributes: FilterUpdateOneCharacterAttributesInput
  savingthrows: FilterUpdateOneCharacterSavingthrowsInput
  skills: [FilterUpdateOneCharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [FilterUpdateOneCharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [FilterUpdateOneCharacterEffectsInput]
  proficiencies: [FilterUpdateOneCharacterProficienciesInput]
  backgroundinfo: FilterUpdateOneCharacterBackgroundinfoInput
  inventory: FilterUpdateOneCharacterInventoryInput
  attacks: [FilterUpdateOneCharacterAttacksInput]
  saves: FilterUpdateOneCharacterSavesInput
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneCharacterOperatorsInput
  OR: [FilterUpdateOneCharacterInput!]
  AND: [FilterUpdateOneCharacterInput!]
}

""""""
input FilterUpdateOneCharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterInventoryInput {
  backpack: [FilterUpdateOneCharacterInventoryBackpackInput]
  equipped: [FilterUpdateOneCharacterInventoryEquippedInput]
}

""""""
input FilterUpdateOneCharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

""""""
input FilterUpdateOneCharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneCharacterOperatorsInput {
  _id: FilterUpdateOneCharacter_idOperatorsInput
}

""""""
input FilterUpdateOneCharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterSavesInput {
  succes: Float
  failure: Float
}

""""""
input FilterUpdateOneCharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [FilterUpdateOneCharacterSavingthrowsCharismaModifiersInput]
}

""""""
input FilterUpdateOneCharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [FilterUpdateOneCharacterSavingthrowsConstitutionModifiersInput]
}

""""""
input FilterUpdateOneCharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [FilterUpdateOneCharacterSavingthrowsDexterityModifiersInput]
}

""""""
input FilterUpdateOneCharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterSavingthrowsInput {
  strength: FilterUpdateOneCharacterSavingthrowsStrengthInput
  dexterity: FilterUpdateOneCharacterSavingthrowsDexterityInput
  constitution: FilterUpdateOneCharacterSavingthrowsConstitutionInput
  intelligence: FilterUpdateOneCharacterSavingthrowsIntelligenceInput
  wisdom: FilterUpdateOneCharacterSavingthrowsWisdomInput
  charisma: FilterUpdateOneCharacterSavingthrowsCharismaInput
}

""""""
input FilterUpdateOneCharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [FilterUpdateOneCharacterSavingthrowsIntelligenceModifiersInput]
}

""""""
input FilterUpdateOneCharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [FilterUpdateOneCharacterSavingthrowsStrengthModifiersInput]
}

""""""
input FilterUpdateOneCharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [FilterUpdateOneCharacterSavingthrowsWisdomModifiersInput]
}

""""""
input FilterUpdateOneCharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [FilterUpdateOneCharacterSkillsModifiersInput]
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

""""""
input FilterUpdateOneCharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

input FilterUpdateOneHandout_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneHandoutInput {
  name: String
  image: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneHandoutOperatorsInput
  OR: [FilterUpdateOneHandoutInput!]
  AND: [FilterUpdateOneHandoutInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneHandoutOperatorsInput {
  _id: FilterUpdateOneHandout_idOperatorsInput
}

input FilterUpdateOneItem_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneItemOperatorsInput
  OR: [FilterUpdateOneItemInput!]
  AND: [FilterUpdateOneItemInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneItemOperatorsInput {
  _id: FilterUpdateOneItem_idOperatorsInput
}

input FilterUpdateOneLog_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneLogInput {
  name: String
  session: Float
  text: String
  campaign: MongoID
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneLogOperatorsInput
  OR: [FilterUpdateOneLogInput!]
  AND: [FilterUpdateOneLogInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneLogOperatorsInput {
  _id: FilterUpdateOneLog_idOperatorsInput
}

input FilterUpdateOneNote_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneNoteInput {
  name: String
  type: EnumNoteType
  text: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneNoteOperatorsInput
  OR: [FilterUpdateOneNoteInput!]
  AND: [FilterUpdateOneNoteInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneNoteOperatorsInput {
  _id: FilterUpdateOneNote_idOperatorsInput
}

input FilterUpdateOneSpell_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneSpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneSpellOperatorsInput
  OR: [FilterUpdateOneSpellInput!]
  AND: [FilterUpdateOneSpellInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneSpellOperatorsInput {
  _id: FilterUpdateOneSpell_idOperatorsInput
}

input FilterUpdateOneUser_idOperatorsInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
  exists: Boolean
}

""""""
input FilterUpdateOneUserInput {
  email: String
  password: String
  _id: MongoID

  """List of *indexed* fields that can be filtered via operators."""
  _operators: FilterUpdateOneUserOperatorsInput
  OR: [FilterUpdateOneUserInput!]
  AND: [FilterUpdateOneUserInput!]
}

"""For performance reason this type contains only *indexed* fields."""
input FilterUpdateOneUserOperatorsInput {
  _id: FilterUpdateOneUser_idOperatorsInput
}

type Handout {
  name: String!
  image: String!
  _id: MongoID!
}

"""A connection to a list of items."""
type HandoutConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [HandoutEdge!]!
}

"""An edge in a connection."""
type HandoutEdge {
  """The item at the end of the edge"""
  node: Handout!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type HandoutPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Handout!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Item {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
  _id: MongoID!
}

"""A connection to a list of items."""
type ItemConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ItemEdge!]!
}

"""An edge in a connection."""
type ItemEdge {
  """The item at the end of the edge"""
  node: Item!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type ItemPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Item!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

type Log {
  name: String!
  session: Float!
  text: String
  campaign: MongoID
  _id: MongoID!
}

"""A connection to a list of items."""
type LogConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [LogEdge!]!
}

"""An edge in a connection."""
type LogEdge {
  """The item at the end of the edge"""
  node: Log!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type LogPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Log!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

"""
The `ID` scalar type represents a unique MongoDB identifier in collection. MongoDB by default use 12-byte ObjectId value (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  campaignCreateOne(record: CreateOneCampaignInput!): CreateOneCampaignPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  campaignCreateMany(records: [CreateManyCampaignInput!]!): CreateManyCampaignPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  campaignUpdateById(_id: MongoID!, record: UpdateByIdCampaignInput!): UpdateByIdCampaignPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  campaignUpdateOne(
    record: UpdateOneCampaignInput!

    """Filter by fields"""
    filter: FilterUpdateOneCampaignInput
    sort: SortUpdateOneCampaignInput
    skip: Int
  ): UpdateOneCampaignPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  campaignUpdateMany(
    record: UpdateManyCampaignInput!

    """Filter by fields"""
    filter: FilterUpdateManyCampaignInput
    sort: SortUpdateManyCampaignInput
    skip: Int
    limit: Int = 100
  ): UpdateManyCampaignPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  campaignRemoveById(_id: MongoID!): RemoveByIdCampaignPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  campaignRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneCampaignInput
    sort: SortRemoveOneCampaignInput
  ): RemoveOneCampaignPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  campaignRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyCampaignInput!
    limit: Int = 100
  ): RemoveManyCampaignPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  characterCreateOne(record: CreateOneCharacterInput!): CreateOneCharacterPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  characterCreateMany(records: [CreateManyCharacterInput!]!): CreateManyCharacterPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  characterUpdateById(_id: MongoID!, record: UpdateByIdCharacterInput!): UpdateByIdCharacterPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  characterUpdateOne(
    record: UpdateOneCharacterInput!

    """Filter by fields"""
    filter: FilterUpdateOneCharacterInput
    sort: SortUpdateOneCharacterInput
    skip: Int
  ): UpdateOneCharacterPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  characterUpdateMany(
    record: UpdateManyCharacterInput!

    """Filter by fields"""
    filter: FilterUpdateManyCharacterInput
    sort: SortUpdateManyCharacterInput
    skip: Int
    limit: Int = 100
  ): UpdateManyCharacterPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  characterRemoveById(_id: MongoID!): RemoveByIdCharacterPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  characterRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneCharacterInput
    sort: SortRemoveOneCharacterInput
  ): RemoveOneCharacterPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  characterRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyCharacterInput!
    limit: Int = 100
  ): RemoveManyCharacterPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  handoutCreateOne(record: CreateOneHandoutInput!): CreateOneHandoutPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  handoutCreateMany(records: [CreateManyHandoutInput!]!): CreateManyHandoutPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  handoutUpdateById(_id: MongoID!, record: UpdateByIdHandoutInput!): UpdateByIdHandoutPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  handoutUpdateOne(
    record: UpdateOneHandoutInput!

    """Filter by fields"""
    filter: FilterUpdateOneHandoutInput
    sort: SortUpdateOneHandoutInput
    skip: Int
  ): UpdateOneHandoutPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  handoutUpdateMany(
    record: UpdateManyHandoutInput!

    """Filter by fields"""
    filter: FilterUpdateManyHandoutInput
    sort: SortUpdateManyHandoutInput
    skip: Int
    limit: Int = 100
  ): UpdateManyHandoutPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  handoutRemoveById(_id: MongoID!): RemoveByIdHandoutPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  handoutRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneHandoutInput
    sort: SortRemoveOneHandoutInput
  ): RemoveOneHandoutPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  handoutRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyHandoutInput!
    limit: Int = 100
  ): RemoveManyHandoutPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  itemCreateOne(record: CreateOneItemInput!): CreateOneItemPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  itemCreateMany(records: [CreateManyItemInput!]!): CreateManyItemPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  itemUpdateById(_id: MongoID!, record: UpdateByIdItemInput!): UpdateByIdItemPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  itemUpdateOne(
    record: UpdateOneItemInput!

    """Filter by fields"""
    filter: FilterUpdateOneItemInput
    sort: SortUpdateOneItemInput
    skip: Int
  ): UpdateOneItemPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  itemUpdateMany(
    record: UpdateManyItemInput!

    """Filter by fields"""
    filter: FilterUpdateManyItemInput
    sort: SortUpdateManyItemInput
    skip: Int
    limit: Int = 100
  ): UpdateManyItemPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  itemRemoveById(_id: MongoID!): RemoveByIdItemPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  itemRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneItemInput
    sort: SortRemoveOneItemInput
  ): RemoveOneItemPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  itemRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyItemInput!
    limit: Int = 100
  ): RemoveManyItemPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  logCreateOne(record: CreateOneLogInput!): CreateOneLogPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  logCreateMany(records: [CreateManyLogInput!]!): CreateManyLogPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  logUpdateById(_id: MongoID!, record: UpdateByIdLogInput!): UpdateByIdLogPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  logUpdateOne(
    record: UpdateOneLogInput!

    """Filter by fields"""
    filter: FilterUpdateOneLogInput
    sort: SortUpdateOneLogInput
    skip: Int
  ): UpdateOneLogPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  logUpdateMany(
    record: UpdateManyLogInput!

    """Filter by fields"""
    filter: FilterUpdateManyLogInput
    sort: SortUpdateManyLogInput
    skip: Int
    limit: Int = 100
  ): UpdateManyLogPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  logRemoveById(_id: MongoID!): RemoveByIdLogPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  logRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneLogInput
    sort: SortRemoveOneLogInput
  ): RemoveOneLogPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  logRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyLogInput!
    limit: Int = 100
  ): RemoveManyLogPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  noteCreateOne(record: CreateOneNoteInput!): CreateOneNotePayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  noteCreateMany(records: [CreateManyNoteInput!]!): CreateManyNotePayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  noteUpdateById(_id: MongoID!, record: UpdateByIdNoteInput!): UpdateByIdNotePayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  noteUpdateOne(
    record: UpdateOneNoteInput!

    """Filter by fields"""
    filter: FilterUpdateOneNoteInput
    sort: SortUpdateOneNoteInput
    skip: Int
  ): UpdateOneNotePayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  noteUpdateMany(
    record: UpdateManyNoteInput!

    """Filter by fields"""
    filter: FilterUpdateManyNoteInput
    sort: SortUpdateManyNoteInput
    skip: Int
    limit: Int = 100
  ): UpdateManyNotePayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  noteRemoveById(_id: MongoID!): RemoveByIdNotePayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  noteRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneNoteInput
    sort: SortRemoveOneNoteInput
  ): RemoveOneNotePayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  noteRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyNoteInput!
    limit: Int = 100
  ): RemoveManyNotePayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  spellCreateOne(record: CreateOneSpellInput!): CreateOneSpellPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  spellCreateMany(records: [CreateManySpellInput!]!): CreateManySpellPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  spellUpdateById(_id: MongoID!, record: UpdateByIdSpellInput!): UpdateByIdSpellPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  spellUpdateOne(
    record: UpdateOneSpellInput!

    """Filter by fields"""
    filter: FilterUpdateOneSpellInput
    sort: SortUpdateOneSpellInput
    skip: Int
  ): UpdateOneSpellPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  spellUpdateMany(
    record: UpdateManySpellInput!

    """Filter by fields"""
    filter: FilterUpdateManySpellInput
    sort: SortUpdateManySpellInput
    skip: Int
    limit: Int = 100
  ): UpdateManySpellPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  spellRemoveById(_id: MongoID!): RemoveByIdSpellPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  spellRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneSpellInput
    sort: SortRemoveOneSpellInput
  ): RemoveOneSpellPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  spellRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManySpellInput!
    limit: Int = 100
  ): RemoveManySpellPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  userCreateOne(record: CreateOneUserInput!): CreateOneUserPayload

  """
  Creates Many documents with mongoose defaults, setters, hooks and validation
  """
  userCreateMany(records: [CreateManyUserInput!]!): CreateManyUserPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  userUpdateById(_id: MongoID!, record: UpdateByIdUserInput!): UpdateByIdUserPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to mongoose document. 3) Mongoose applies defaults, setters, hooks and validation. 4) And save it.
  """
  userUpdateOne(
    record: UpdateOneUserInput!

    """Filter by fields"""
    filter: FilterUpdateOneUserInput
    sort: SortUpdateOneUserInput
    skip: Int
  ): UpdateOneUserPayload

  """
  Update many documents without returning them: Use Query.update mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  userUpdateMany(
    record: UpdateManyUserInput!

    """Filter by fields"""
    filter: FilterUpdateManyUserInput
    sort: SortUpdateManyUserInput
    skip: Int
    limit: Int = 100
  ): UpdateManyUserPayload

  """
  Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  """
  userRemoveById(_id: MongoID!): RemoveByIdUserPayload

  """
  Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  """
  userRemoveOne(
    """Filter by fields"""
    filter: FilterRemoveOneUserInput
    sort: SortRemoveOneUserInput
  ): RemoveOneUserPayload

  """
  Remove many documents without returning them: Use Query.remove mongoose method. Do not apply mongoose defaults, setters, hooks and validation.
  """
  userRemoveMany(
    """Filter by fields"""
    filter: FilterRemoveManyUserInput!
    limit: Int = 100
  ): RemoveManyUserPayload
}

type Note {
  name: String!
  type: EnumNoteType!
  text: String!
  _id: MongoID!
}

"""A connection to a list of items."""
type NoteConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [NoteEdge!]!
}

"""An edge in a connection."""
type NoteEdge {
  """The item at the end of the edge"""
  node: Note!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type NotePagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Note!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaginationInfo {
  currentPage: Int!
  perPage: Int!
  pageCount: Int
  itemCount: Int
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type Query {
  campaignById(_id: MongoID!): Campaign
  campaignByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsCampaignInput): [Campaign!]!
  campaignOne(
    """Filter by fields"""
    filter: FilterFindOneCampaignInput
    skip: Int
    sort: SortFindOneCampaignInput
  ): Campaign
  campaignMany(
    """Filter by fields"""
    filter: FilterFindManyCampaignInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyCampaignInput
  ): [Campaign!]!
  campaignCount(
    """Filter by fields"""
    filter: FilterCountCampaignInput
  ): Int
  campaignConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyCampaignInput

    """Sort argument for data ordering"""
    sort: SortConnectionCampaignEnum = _ID_DESC
  ): CampaignConnection
  campaignPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyCampaignInput
    sort: SortFindManyCampaignInput
  ): CampaignPagination
  characterById(_id: MongoID!): Character
  characterByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsCharacterInput): [Character!]!
  characterOne(
    """Filter by fields"""
    filter: FilterFindOneCharacterInput
    skip: Int
    sort: SortFindOneCharacterInput
  ): Character
  characterMany(
    """Filter by fields"""
    filter: FilterFindManyCharacterInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyCharacterInput
  ): [Character!]!
  characterCount(
    """Filter by fields"""
    filter: FilterCountCharacterInput
  ): Int
  characterConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyCharacterInput

    """Sort argument for data ordering"""
    sort: SortConnectionCharacterEnum = _ID_DESC
  ): CharacterConnection
  characterPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyCharacterInput
    sort: SortFindManyCharacterInput
  ): CharacterPagination
  handoutById(_id: MongoID!): Handout
  handoutByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsHandoutInput): [Handout!]!
  handoutOne(
    """Filter by fields"""
    filter: FilterFindOneHandoutInput
    skip: Int
    sort: SortFindOneHandoutInput
  ): Handout
  handoutMany(
    """Filter by fields"""
    filter: FilterFindManyHandoutInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyHandoutInput
  ): [Handout!]!
  handoutCount(
    """Filter by fields"""
    filter: FilterCountHandoutInput
  ): Int
  handoutConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyHandoutInput

    """Sort argument for data ordering"""
    sort: SortConnectionHandoutEnum = _ID_DESC
  ): HandoutConnection
  handoutPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyHandoutInput
    sort: SortFindManyHandoutInput
  ): HandoutPagination
  itemById(_id: MongoID!): Item
  itemByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsItemInput): [Item!]!
  itemOne(
    """Filter by fields"""
    filter: FilterFindOneItemInput
    skip: Int
    sort: SortFindOneItemInput
  ): Item
  itemMany(
    """Filter by fields"""
    filter: FilterFindManyItemInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyItemInput
  ): [Item!]!
  itemCount(
    """Filter by fields"""
    filter: FilterCountItemInput
  ): Int
  itemConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyItemInput

    """Sort argument for data ordering"""
    sort: SortConnectionItemEnum = _ID_DESC
  ): ItemConnection
  itemPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyItemInput
    sort: SortFindManyItemInput
  ): ItemPagination
  logById(_id: MongoID!): Log
  logByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsLogInput): [Log!]!
  logOne(
    """Filter by fields"""
    filter: FilterFindOneLogInput
    skip: Int
    sort: SortFindOneLogInput
  ): Log
  logMany(
    """Filter by fields"""
    filter: FilterFindManyLogInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyLogInput
  ): [Log!]!
  logCount(
    """Filter by fields"""
    filter: FilterCountLogInput
  ): Int
  logConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyLogInput

    """Sort argument for data ordering"""
    sort: SortConnectionLogEnum = _ID_DESC
  ): LogConnection
  logPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyLogInput
    sort: SortFindManyLogInput
  ): LogPagination
  noteById(_id: MongoID!): Note
  noteByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsNoteInput): [Note!]!
  noteOne(
    """Filter by fields"""
    filter: FilterFindOneNoteInput
    skip: Int
    sort: SortFindOneNoteInput
  ): Note
  noteMany(
    """Filter by fields"""
    filter: FilterFindManyNoteInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyNoteInput
  ): [Note!]!
  noteCount(
    """Filter by fields"""
    filter: FilterCountNoteInput
  ): Int
  noteConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyNoteInput

    """Sort argument for data ordering"""
    sort: SortConnectionNoteEnum = _ID_DESC
  ): NoteConnection
  notePagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyNoteInput
    sort: SortFindManyNoteInput
  ): NotePagination
  spellById(_id: MongoID!): Spell
  spellByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsSpellInput): [Spell!]!
  spellOne(
    """Filter by fields"""
    filter: FilterFindOneSpellInput
    skip: Int
    sort: SortFindOneSpellInput
  ): Spell
  spellMany(
    """Filter by fields"""
    filter: FilterFindManySpellInput
    skip: Int
    limit: Int = 100
    sort: SortFindManySpellInput
  ): [Spell!]!
  spellCount(
    """Filter by fields"""
    filter: FilterCountSpellInput
  ): Int
  spellConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManySpellInput

    """Sort argument for data ordering"""
    sort: SortConnectionSpellEnum = _ID_DESC
  ): SpellConnection
  spellPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManySpellInput
    sort: SortFindManySpellInput
  ): SpellPagination
  userById(_id: MongoID!): User
  userByIds(_ids: [MongoID!]!, limit: Int = 100, sort: SortFindByIdsUserInput): [User!]!
  userOne(
    """Filter by fields"""
    filter: FilterFindOneUserInput
    skip: Int
    sort: SortFindOneUserInput
  ): User
  userMany(
    """Filter by fields"""
    filter: FilterFindManyUserInput
    skip: Int
    limit: Int = 100
    sort: SortFindManyUserInput
  ): [User!]!
  userCount(
    """Filter by fields"""
    filter: FilterCountUserInput
  ): Int
  userConnection(
    """Forward pagination argument for returning at most first edges"""
    first: Int

    """Forward pagination argument for returning at most first edges"""
    after: String

    """Backward pagination argument for returning at most last edges"""
    last: Int

    """Backward pagination argument for returning at most last edges"""
    before: String

    """Filter by fields"""
    filter: FilterFindManyUserInput

    """Sort argument for data ordering"""
    sort: SortConnectionUserEnum = _ID_DESC
  ): UserConnection
  userPagination(
    """Page number for displaying"""
    page: Int

    """"""
    perPage: Int = 20

    """Filter by fields"""
    filter: FilterFindManyUserInput
    sort: SortFindManyUserInput
  ): UserPagination
}

type RemoveByIdCampaignPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Campaign

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdCharacterPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Character

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdHandoutPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Handout

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdItemPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Item

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdLogPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdNotePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Note

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdSpellPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Spell

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveByIdUserPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyCampaignPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyCharacterPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyHandoutPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyItemPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyLogPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyNotePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManySpellPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveManyUserPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneCampaignPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Campaign

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneCharacterPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Character

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneHandoutPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Handout

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneItemPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Item

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneLogPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneNotePayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Note

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneSpellPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: Spell

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type RemoveOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Removed document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

enum SortConnectionCampaignEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionCharacterEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionHandoutEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionItemEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionLogEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionNoteEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionSpellEnum {
  _ID_DESC
  _ID_ASC
}

enum SortConnectionUserEnum {
  _ID_DESC
  _ID_ASC
}

enum SortFindByIdsCampaignInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsCharacterInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsHandoutInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsItemInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsLogInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsSpellInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindByIdsUserInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyCampaignInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyCharacterInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyHandoutInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyItemInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyLogInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManySpellInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindManyUserInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneCampaignInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneCharacterInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneHandoutInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneItemInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneLogInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneSpellInput {
  _ID_ASC
  _ID_DESC
}

enum SortFindOneUserInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneCampaignInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneCharacterInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneHandoutInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneItemInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneLogInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneSpellInput {
  _ID_ASC
  _ID_DESC
}

enum SortRemoveOneUserInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyCampaignInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyCharacterInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyHandoutInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyItemInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyLogInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManySpellInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateManyUserInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneCampaignInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneCharacterInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneHandoutInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneItemInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneLogInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneNoteInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneSpellInput {
  _ID_ASC
  _ID_DESC
}

enum SortUpdateOneUserInput {
  _ID_ASC
  _ID_DESC
}

type Spell {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
  _id: MongoID!
}

"""A connection to a list of items."""
type SpellConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SpellEdge!]!
}

"""An edge in a connection."""
type SpellEdge {
  """The item at the end of the edge"""
  node: Spell!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type SpellPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [Spell!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}

""""""
input UpdateByIdCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
}

type UpdateByIdCampaignPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Campaign

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdCharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [UpdateByIdCharacterAttributesCharismaModifiersInput]
}

""""""
input UpdateByIdCharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [UpdateByIdCharacterAttributesConstitutionModifiersInput]
}

""""""
input UpdateByIdCharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [UpdateByIdCharacterAttributesDexterityModifiersInput]
}

""""""
input UpdateByIdCharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterAttributesInput {
  strength: UpdateByIdCharacterAttributesStrengthInput
  dexterity: UpdateByIdCharacterAttributesDexterityInput
  constitution: UpdateByIdCharacterAttributesConstitutionInput
  intelligence: UpdateByIdCharacterAttributesIntelligenceInput
  wisdom: UpdateByIdCharacterAttributesWisdomInput
  charisma: UpdateByIdCharacterAttributesCharismaInput
}

""""""
input UpdateByIdCharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [UpdateByIdCharacterAttributesIntelligenceModifiersInput]
}

""""""
input UpdateByIdCharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [UpdateByIdCharacterAttributesStrengthModifiersInput]
}

""""""
input UpdateByIdCharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [UpdateByIdCharacterAttributesWisdomModifiersInput]
}

""""""
input UpdateByIdCharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

""""""
input UpdateByIdCharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

""""""
input UpdateByIdCharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: UpdateByIdCharacterCclassHitdiceInput
  _id: MongoID
}

""""""
input UpdateByIdCharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

""""""
input UpdateByIdCharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterInput {
  name: String
  user: MongoID
  cclass: [UpdateByIdCharacterCclassInput]
  looks: UpdateByIdCharacterLooksInput
  traits: [UpdateByIdCharacterTraitsInput]
  counters: [UpdateByIdCharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: UpdateByIdCharacterMoneyInput
  proficiency: Float
  attributes: UpdateByIdCharacterAttributesInput
  savingthrows: UpdateByIdCharacterSavingthrowsInput
  skills: [UpdateByIdCharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [UpdateByIdCharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [UpdateByIdCharacterEffectsInput]
  proficiencies: [UpdateByIdCharacterProficienciesInput]
  backgroundinfo: UpdateByIdCharacterBackgroundinfoInput
  inventory: UpdateByIdCharacterInventoryInput
  attacks: [UpdateByIdCharacterAttacksInput]
  saves: UpdateByIdCharacterSavesInput
}

""""""
input UpdateByIdCharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input UpdateByIdCharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input UpdateByIdCharacterInventoryInput {
  backpack: [UpdateByIdCharacterInventoryBackpackInput]
  equipped: [UpdateByIdCharacterInventoryEquippedInput]
}

""""""
input UpdateByIdCharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

""""""
input UpdateByIdCharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

type UpdateByIdCharacterPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Character

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdCharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterSavesInput {
  succes: Float
  failure: Float
}

""""""
input UpdateByIdCharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [UpdateByIdCharacterSavingthrowsCharismaModifiersInput]
}

""""""
input UpdateByIdCharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [UpdateByIdCharacterSavingthrowsConstitutionModifiersInput]
}

""""""
input UpdateByIdCharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [UpdateByIdCharacterSavingthrowsDexterityModifiersInput]
}

""""""
input UpdateByIdCharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterSavingthrowsInput {
  strength: UpdateByIdCharacterSavingthrowsStrengthInput
  dexterity: UpdateByIdCharacterSavingthrowsDexterityInput
  constitution: UpdateByIdCharacterSavingthrowsConstitutionInput
  intelligence: UpdateByIdCharacterSavingthrowsIntelligenceInput
  wisdom: UpdateByIdCharacterSavingthrowsWisdomInput
  charisma: UpdateByIdCharacterSavingthrowsCharismaInput
}

""""""
input UpdateByIdCharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [UpdateByIdCharacterSavingthrowsIntelligenceModifiersInput]
}

""""""
input UpdateByIdCharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [UpdateByIdCharacterSavingthrowsStrengthModifiersInput]
}

""""""
input UpdateByIdCharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [UpdateByIdCharacterSavingthrowsWisdomModifiersInput]
}

""""""
input UpdateByIdCharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [UpdateByIdCharacterSkillsModifiersInput]
  _id: MongoID
}

""""""
input UpdateByIdCharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateByIdCharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

""""""
input UpdateByIdCharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

""""""
input UpdateByIdHandoutInput {
  name: String
  image: String
}

type UpdateByIdHandoutPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Handout

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
}

type UpdateByIdItemPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Item

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdLogInput {
  name: String
  session: Float
  text: String
  campaign: MongoID
}

type UpdateByIdLogPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdNoteInput {
  name: String
  type: EnumNoteType
  text: String
}

type UpdateByIdNotePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Note

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdSpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
}

type UpdateByIdSpellPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Spell

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateByIdUserInput {
  email: String
  password: String
}

type UpdateByIdUserPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
}

type UpdateManyCampaignPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyCharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

""""""
input UpdateManyCharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [UpdateManyCharacterAttributesCharismaModifiersInput]
}

""""""
input UpdateManyCharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [UpdateManyCharacterAttributesConstitutionModifiersInput]
}

""""""
input UpdateManyCharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [UpdateManyCharacterAttributesDexterityModifiersInput]
}

""""""
input UpdateManyCharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterAttributesInput {
  strength: UpdateManyCharacterAttributesStrengthInput
  dexterity: UpdateManyCharacterAttributesDexterityInput
  constitution: UpdateManyCharacterAttributesConstitutionInput
  intelligence: UpdateManyCharacterAttributesIntelligenceInput
  wisdom: UpdateManyCharacterAttributesWisdomInput
  charisma: UpdateManyCharacterAttributesCharismaInput
}

""""""
input UpdateManyCharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [UpdateManyCharacterAttributesIntelligenceModifiersInput]
}

""""""
input UpdateManyCharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [UpdateManyCharacterAttributesStrengthModifiersInput]
}

""""""
input UpdateManyCharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [UpdateManyCharacterAttributesWisdomModifiersInput]
}

""""""
input UpdateManyCharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

""""""
input UpdateManyCharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

""""""
input UpdateManyCharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: UpdateManyCharacterCclassHitdiceInput
  _id: MongoID
}

""""""
input UpdateManyCharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

""""""
input UpdateManyCharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

""""""
input UpdateManyCharacterInput {
  name: String
  user: MongoID
  cclass: [UpdateManyCharacterCclassInput]
  looks: UpdateManyCharacterLooksInput
  traits: [UpdateManyCharacterTraitsInput]
  counters: [UpdateManyCharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: UpdateManyCharacterMoneyInput
  proficiency: Float
  attributes: UpdateManyCharacterAttributesInput
  savingthrows: UpdateManyCharacterSavingthrowsInput
  skills: [UpdateManyCharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [UpdateManyCharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [UpdateManyCharacterEffectsInput]
  proficiencies: [UpdateManyCharacterProficienciesInput]
  backgroundinfo: UpdateManyCharacterBackgroundinfoInput
  inventory: UpdateManyCharacterInventoryInput
  attacks: [UpdateManyCharacterAttacksInput]
  saves: UpdateManyCharacterSavesInput
}

""""""
input UpdateManyCharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input UpdateManyCharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input UpdateManyCharacterInventoryInput {
  backpack: [UpdateManyCharacterInventoryBackpackInput]
  equipped: [UpdateManyCharacterInventoryEquippedInput]
}

""""""
input UpdateManyCharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

""""""
input UpdateManyCharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

type UpdateManyCharacterPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyCharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

""""""
input UpdateManyCharacterSavesInput {
  succes: Float
  failure: Float
}

""""""
input UpdateManyCharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [UpdateManyCharacterSavingthrowsCharismaModifiersInput]
}

""""""
input UpdateManyCharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [UpdateManyCharacterSavingthrowsConstitutionModifiersInput]
}

""""""
input UpdateManyCharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [UpdateManyCharacterSavingthrowsDexterityModifiersInput]
}

""""""
input UpdateManyCharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterSavingthrowsInput {
  strength: UpdateManyCharacterSavingthrowsStrengthInput
  dexterity: UpdateManyCharacterSavingthrowsDexterityInput
  constitution: UpdateManyCharacterSavingthrowsConstitutionInput
  intelligence: UpdateManyCharacterSavingthrowsIntelligenceInput
  wisdom: UpdateManyCharacterSavingthrowsWisdomInput
  charisma: UpdateManyCharacterSavingthrowsCharismaInput
}

""""""
input UpdateManyCharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [UpdateManyCharacterSavingthrowsIntelligenceModifiersInput]
}

""""""
input UpdateManyCharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [UpdateManyCharacterSavingthrowsStrengthModifiersInput]
}

""""""
input UpdateManyCharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [UpdateManyCharacterSavingthrowsWisdomModifiersInput]
}

""""""
input UpdateManyCharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [UpdateManyCharacterSkillsModifiersInput]
  _id: MongoID
}

""""""
input UpdateManyCharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateManyCharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

""""""
input UpdateManyCharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

""""""
input UpdateManyHandoutInput {
  name: String
  image: String
}

type UpdateManyHandoutPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
}

type UpdateManyItemPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyLogInput {
  name: String
  session: Float
  text: String
  campaign: MongoID
}

type UpdateManyLogPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyNoteInput {
  name: String
  type: EnumNoteType
  text: String
}

type UpdateManyNotePayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManySpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
}

type UpdateManySpellPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateManyUserInput {
  email: String
  password: String
}

type UpdateManyUserPayload {
  """Affected documents number"""
  numAffected: Int

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneCampaignInput {
  name: String
  DM: MongoID
  users: [MongoID]
  characters: [MongoID]
  logs: [MongoID]
  items: [MongoID]
  spells: [MongoID]
  notes: [MongoID]
  handouts: [MongoID]
}

type UpdateOneCampaignPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Campaign

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneCharacterAttacksInput {
  name: String
  attack: String
  damage: String
  extra: String
  _id: MongoID
}

""""""
input UpdateOneCharacterAttributesCharismaInput {
  name: String
  base: Float
  modifiers: [UpdateOneCharacterAttributesCharismaModifiersInput]
}

""""""
input UpdateOneCharacterAttributesCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterAttributesConstitutionInput {
  name: String
  base: Float
  modifiers: [UpdateOneCharacterAttributesConstitutionModifiersInput]
}

""""""
input UpdateOneCharacterAttributesConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterAttributesDexterityInput {
  name: String
  base: Float
  modifiers: [UpdateOneCharacterAttributesDexterityModifiersInput]
}

""""""
input UpdateOneCharacterAttributesDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterAttributesInput {
  strength: UpdateOneCharacterAttributesStrengthInput
  dexterity: UpdateOneCharacterAttributesDexterityInput
  constitution: UpdateOneCharacterAttributesConstitutionInput
  intelligence: UpdateOneCharacterAttributesIntelligenceInput
  wisdom: UpdateOneCharacterAttributesWisdomInput
  charisma: UpdateOneCharacterAttributesCharismaInput
}

""""""
input UpdateOneCharacterAttributesIntelligenceInput {
  name: String
  base: Float
  modifiers: [UpdateOneCharacterAttributesIntelligenceModifiersInput]
}

""""""
input UpdateOneCharacterAttributesIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterAttributesStrengthInput {
  name: String
  base: Float
  modifiers: [UpdateOneCharacterAttributesStrengthModifiersInput]
}

""""""
input UpdateOneCharacterAttributesStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterAttributesWisdomInput {
  name: String
  base: Float
  modifiers: [UpdateOneCharacterAttributesWisdomModifiersInput]
}

""""""
input UpdateOneCharacterAttributesWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterBackgroundinfoInput {
  ideals: String
  bonds: String
  flaws: String
  story: String
  features: String
  trinket: String
  allies: String
  backstory: String
  traits: String
}

""""""
input UpdateOneCharacterCclassHitdiceInput {
  current: Float
  dice: Float
}

""""""
input UpdateOneCharacterCclassInput {
  name: String
  subclass: String
  level: Float
  hitdice: UpdateOneCharacterCclassHitdiceInput
  _id: MongoID
}

""""""
input UpdateOneCharacterCountersInput {
  name: String
  max: Float
  current: Float
  _id: MongoID
}

""""""
input UpdateOneCharacterEffectsInput {
  icon: String
  name: String
  description: String
  _id: MongoID
}

""""""
input UpdateOneCharacterInput {
  name: String
  user: MongoID
  cclass: [UpdateOneCharacterCclassInput]
  looks: UpdateOneCharacterLooksInput
  traits: [UpdateOneCharacterTraitsInput]
  counters: [UpdateOneCharacterCountersInput]
  race: String
  background: String
  alignment: String
  experience: Float
  money: UpdateOneCharacterMoneyInput
  proficiency: Float
  attributes: UpdateOneCharacterAttributesInput
  savingthrows: UpdateOneCharacterSavingthrowsInput
  skills: [UpdateOneCharacterSkillsInput]
  ac: Float
  initiative: Float
  movement: Float
  maxhp: Float
  currenthp: Float
  temporaryhp: Float
  spells: [UpdateOneCharacterSpellsInput]
  spellsave: Float
  spellattack: Float
  effects: [UpdateOneCharacterEffectsInput]
  proficiencies: [UpdateOneCharacterProficienciesInput]
  backgroundinfo: UpdateOneCharacterBackgroundinfoInput
  inventory: UpdateOneCharacterInventoryInput
  attacks: [UpdateOneCharacterAttacksInput]
  saves: UpdateOneCharacterSavesInput
}

""""""
input UpdateOneCharacterInventoryBackpackInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input UpdateOneCharacterInventoryEquippedInput {
  class: String
  name: String
  description: String
  weight: Float
  cost: String
  type: String
  icon: String
  color: String
  rarity: String
  attunement: String
  ac: String
  strength: Float
  damage: String
  properties: String
  stealth: String
  count: Float
  attuned: Boolean
  _id: MongoID
}

""""""
input UpdateOneCharacterInventoryInput {
  backpack: [UpdateOneCharacterInventoryBackpackInput]
  equipped: [UpdateOneCharacterInventoryEquippedInput]
}

""""""
input UpdateOneCharacterLooksInput {
  age: Float
  weight: Float
  height: String
  eyes: String
  skin: String
  hair: String
  description: String
}

""""""
input UpdateOneCharacterMoneyInput {
  pp: Float
  gp: Float
  sp: Float
  cp: Float
}

type UpdateOneCharacterPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Character

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneCharacterProficienciesInput {
  name: String
  description: String
  _id: MongoID
}

""""""
input UpdateOneCharacterSavesInput {
  succes: Float
  failure: Float
}

""""""
input UpdateOneCharacterSavingthrowsCharismaInput {
  proficiency: Float
  modifiers: [UpdateOneCharacterSavingthrowsCharismaModifiersInput]
}

""""""
input UpdateOneCharacterSavingthrowsCharismaModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterSavingthrowsConstitutionInput {
  proficiency: Float
  modifiers: [UpdateOneCharacterSavingthrowsConstitutionModifiersInput]
}

""""""
input UpdateOneCharacterSavingthrowsConstitutionModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterSavingthrowsDexterityInput {
  proficiency: Float
  modifiers: [UpdateOneCharacterSavingthrowsDexterityModifiersInput]
}

""""""
input UpdateOneCharacterSavingthrowsDexterityModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterSavingthrowsInput {
  strength: UpdateOneCharacterSavingthrowsStrengthInput
  dexterity: UpdateOneCharacterSavingthrowsDexterityInput
  constitution: UpdateOneCharacterSavingthrowsConstitutionInput
  intelligence: UpdateOneCharacterSavingthrowsIntelligenceInput
  wisdom: UpdateOneCharacterSavingthrowsWisdomInput
  charisma: UpdateOneCharacterSavingthrowsCharismaInput
}

""""""
input UpdateOneCharacterSavingthrowsIntelligenceInput {
  proficiency: Float
  modifiers: [UpdateOneCharacterSavingthrowsIntelligenceModifiersInput]
}

""""""
input UpdateOneCharacterSavingthrowsIntelligenceModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterSavingthrowsStrengthInput {
  proficiency: Float
  modifiers: [UpdateOneCharacterSavingthrowsStrengthModifiersInput]
}

""""""
input UpdateOneCharacterSavingthrowsStrengthModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterSavingthrowsWisdomInput {
  proficiency: Float
  modifiers: [UpdateOneCharacterSavingthrowsWisdomModifiersInput]
}

""""""
input UpdateOneCharacterSavingthrowsWisdomModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterSkillsInput {
  name: String
  ability: String
  proficiency: Float
  modifiers: [UpdateOneCharacterSkillsModifiersInput]
  _id: MongoID
}

""""""
input UpdateOneCharacterSkillsModifiersInput {
  name: String
  value: Float
  source: String
  _id: MongoID
}

""""""
input UpdateOneCharacterSpellsInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  prepared: Boolean
  _id: MongoID
}

""""""
input UpdateOneCharacterTraitsInput {
  name: String
  description: String
  source: String
  _id: MongoID
}

""""""
input UpdateOneHandoutInput {
  name: String
  image: String
}

type UpdateOneHandoutPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Handout

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneItemInput {
  name: String
  class: String
  type: String
  cost: String
  weight: Float
  description: String
  ac: String
  strength: Float
  stealth: String
  damage: String
  properties: String
  rarity: String
  attunement: String
  attuned: Boolean
  icon: String
  color: String
  user: MongoID
  private: Boolean
}

type UpdateOneItemPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Item

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneLogInput {
  name: String
  session: Float
  text: String
  campaign: MongoID
}

type UpdateOneLogPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Log

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneNoteInput {
  name: String
  type: EnumNoteType
  text: String
}

type UpdateOneNotePayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Note

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneSpellInput {
  name: String
  level: Float
  castingtime: String
  duration: String
  distance: String
  attack: String
  school: String
  effect: String
  components: String
  description: String
  concentration: Boolean
  user: MongoID
  private: Boolean
}

type UpdateOneSpellPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: Spell

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

""""""
input UpdateOneUserInput {
  email: String
  password: String
}

type UpdateOneUserPayload {
  """Document ID"""
  recordId: MongoID

  """Updated document"""
  record: User

  """
  Error that may occur during operation. If you request this field in GraphQL query, you will receive typed error in payload; otherwise error will be provided in root `errors` field of GraphQL response.
  """
  error: ErrorInterface
}

type User {
  email: String!
  password: String!
  _id: MongoID!
}

"""A connection to a list of items."""
type UserConnection {
  """Total object count."""
  count: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserEdge!]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge"""
  node: User!

  """A cursor for use in pagination"""
  cursor: String!
}

"""List of items with pagination."""
type UserPagination {
  """Total object count."""
  count: Int

  """Array of objects."""
  items: [User!]

  """Information to aid in pagination."""
  pageInfo: PaginationInfo!
}
